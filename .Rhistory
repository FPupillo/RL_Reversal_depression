#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Reward - Loss Sensitivity")
ggplot(memory_data_wide[memory_data_wide$excl==0,],
aes(x = rhogain_loss_asym, y = rev_PminusN, color = BDI))+
geom_line(stat="smooth",method = "lm",fullrange=T, formula=y~x, alpha=0.7,
size = 1, se=T)+
aes(group = (BDI))+
#geom_line(data = data2, stat="smooth",method = "lm", size = 1, se=T)+
geom_smooth(data = data2, method=lm,se=T, size=3)+
#geom_point(alpha = 0.10, colour = "black" )
#geom_point( formula=y~x, alpha=0.5, se=F)+
# specify that we want different colours for different participants
#aes(colour = factor(participant))+
# add the summary line with geom_smooth
#geom_smooth(method=lm,se=FALSE,fullrange=TRUE,aes(color=BDI, alpha=0.3))
#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Reward - Loss Sensitivity")
ggplot(memory_data_wide[memory_data_wide$excl==0,],
aes(x = rhogain_loss_asym, y = rev_PminusN, color = BDI))+
geom_line(stat="smooth",method = "lm",fullrange=T, formula=y~x, alpha=0.7,
size = 1.5, se=T)+
aes(group = (BDI))+
#geom_line(data = data2, stat="smooth",method = "lm", size = 1, se=T)+
geom_smooth(data = data2, method=lm,se=T, size=3)+
#geom_point(alpha = 0.10, colour = "black" )
#geom_point( formula=y~x, alpha=0.5, se=F)+
# specify that we want different colours for different participants
#aes(colour = factor(participant))+
# add the summary line with geom_smooth
#geom_smooth(method=lm,se=FALSE,fullrange=TRUE,aes(color=BDI, alpha=0.3))
#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Reward - Loss Sensitivity")
ggplot(memory_data_wide[memory_data_wide$excl==0,],
aes(x = rhogain_loss_asym, y = rev_PminusN, color = BDI))+
geom_line(stat="smooth",method = "lm",fullrange=T, formula=y~x, alpha=0.7,
size = 1.5, se=T)+
aes(group = (BDI))+
#geom_line(data = data2, stat="smooth",method = "lm", size = 1, se=T)+
geom_smooth(data = data2, method=lm,se=T, size=3)+
#geom_point(alpha = 0.10, colour = "black" )
#geom_point( formula=y~x, alpha=0.5, se=F)+
# specify that we want different colours for different participants
#aes(colour = factor(participant))+
# add the summary line with geom_smooth
#geom_smooth(method=lm,se=FALSE,fullrange=TRUE,aes(color=BDI, alpha=0.3))
#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Pos - Neg Sensitivity")
memory_data_wide$SHAPS<-memory_data_wide$SHAPS+1
ggplot(memory_data_wide[memory_data_wide$excl==0,],
aes(x = rhogain_loss_asym, y = rev_PminusN, color = SHAPS))+
geom_line(stat="smooth",method = "lm",fullrange=T, formula=y~x, alpha=0.5,
size = 0.7, se=F)+
aes(group = SHAPS)+
#geom_line(data = data2, stat="smooth",method = "lm", size = 1, se=T)+
geom_smooth(data = data2, method=lm,se=T, size=1)+
#geom_point(alpha = 0.10, colour = "black" )
#geom_point( formula=y~x, alpha=0.5, se=F)+
# specify that we want different colours for different participants
#aes(colour = factor(participant))+
# add the summary line with geom_smooth
#geom_smooth(method=lm,se=FALSE,fullrange=TRUE,aes(color=BDI, alpha=0.3))
#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Pos - Neg Sensitivity")
ggplot(memory_data_wide[memory_data_wide$excl==0,],
aes(x = rhogain_loss_asym, y = rev_PminusN, color = SHAPS))+
geom_line(stat="smooth",method = "lm",fullrange=T, formula=y~x, alpha=0.5,
size = 0.7, se=F)+
aes(group = SHAPS)+
#geom_line(data = data2, stat="smooth",method = "lm", size = 1, se=T)+
geom_smooth(data = data2, method=lm,se=F, size=1)+
#geom_point(alpha = 0.10, colour = "black" )
#geom_point( formula=y~x, alpha=0.5, se=F)+
# specify that we want different colours for different participants
#aes(colour = factor(participant))+
# add the summary line with geom_smooth
#geom_smooth(method=lm,se=FALSE,fullrange=TRUE,aes(color=BDI, alpha=0.3))
#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Pos - Neg Sensitivity")
# now SHAPS
data2$SHAPS<-1
memory_data_wide$SHAPS<-memory_data_wide$SHAPS+1
ggplot(memory_data_wide[memory_data_wide$excl==0,],
aes(x = rhogain_loss_asym, y = rev_PminusN, color = SHAPS))+
geom_line(stat="smooth",method = "lm",fullrange=T, formula=y~x, alpha=0.5,
size = 0.7, se=F)+
aes(group = SHAPS)+
#geom_line(data = data2, stat="smooth",method = "lm", size = 1, se=T)+
geom_smooth(data = data2, method=lm,se=F, size=1)+
#geom_point(alpha = 0.10, colour = "black" )
#geom_point( formula=y~x, alpha=0.5, se=F)+
# specify that we want different colours for different participants
#aes(colour = factor(participant))+
# add the summary line with geom_smooth
#geom_smooth(method=lm,se=FALSE,fullrange=TRUE,aes(color=BDI, alpha=0.3))
#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Pos - Neg Sensitivity")
ggplot(memory_data_wide[memory_data_wide$excl==0,],
aes(x = rhogain_loss_asym, y = rev_PminusN, color = SHAPS))+
geom_line(stat="smooth",method = "lm",fullrange=T, formula=y~x, alpha=0.5,
size = 0.7, se=F)+
aes(group = SHAPS)+
#geom_line(data = data2, stat="smooth",method = "lm", size = 1, se=T)+
geom_smooth(data = data2, method=lm,se=T, size=3)+
#geom_point(alpha = 0.10, colour = "black" )
#geom_point( formula=y~x, alpha=0.5, se=F)+
# specify that we want different colours for different participants
#aes(colour = factor(participant))+
# add the summary line with geom_smooth
#geom_smooth(method=lm,se=FALSE,fullrange=TRUE,aes(color=BDI, alpha=0.3))
#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Pos - Neg Sensitivity")
ggplot(memory_data_wide[memory_data_wide$excl==0,],
aes(x = rhogain_loss_asym, y = rev_PminusN, color = SHAPS))+
geom_line(stat="smooth",method = "lm",fullrange=T, formula=y~x, alpha=0.5,
size = 1.5, se=F)+
aes(group = SHAPS)+
#geom_line(data = data2, stat="smooth",method = "lm", size = 1, se=T)+
geom_smooth(data = data2, method=lm,se=T, size=3)+
#geom_point(alpha = 0.10, colour = "black" )
#geom_point( formula=y~x, alpha=0.5, se=F)+
# specify that we want different colours for different participants
#aes(colour = factor(participant))+
# add the summary line with geom_smooth
#geom_smooth(method=lm,se=FALSE,fullrange=TRUE,aes(color=BDI, alpha=0.3))
#geom_line(datastat="smooth", method="lm",formula=y~x, se = F)
#geom_smooth(method="lm",formula=y~x, se=F, colour = "black" )+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
#theme(legend.position = "none")+
custom_param()+
ylab("Memory Pos Rev - Neg rev")+
xlab("Pos - Neg Sensitivity")
anova(model_wide_SHAPS)
# learning rate
model_wide_BDI<-lm(rev_PminusN~gain_loss_asym*BDI, data = memory_data_wide)
anova(model_wide_BDI)
corrplot(mydata.cor)
View(data2)
rm(list=ls())
library(dplyr)
library(ggplot2)
library(Rmisc)
library(lme4)
library(car)
source("helper_functions/cum_acc_window.R")
# we are using the data that Stefanie said they have RL scoring above chance
path_to_data<-"~/PowerFolders/Frankfurt_University/rev_aned_steffi_thesis/data_RL_screen"
# get the data
data_files<-list.files(path_to_data, pattern = ".csv")
#questionnaires files
quest<-read.csv(paste0(dirname(path_to_data), "/", "Output_scales_39.csv"))
number<-1
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# get the data
data_files<-list.files(path_to_data, pattern = ".csv")
path_to_data<-paste0(getwd(), "/data_RL_screen")
# get the data
data_files<-list.files(path_to_data, pattern = ".csv")
dirname(path_to_data)
#questionnaires files
quest<-read.csv(paste0(dirname(path_to_data), "/", "Output_scales_39.csv"))
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
c_file$BDI_score<-c_quest$BDI_score
c_file$SHAPS_score<-c_quest$SHAPS_score
c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
c_file$key_resp_Instr_SHAPS.keys
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys
c_SHAPS
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# get a file only with the shaps
shaps_all<-vector()
number
View(quest)
file_name
file_name[1]
ID<-substring <- sub(" .*", "", file_name)
shaps_all<-rbind(shaps_all, as.data.fame(cbind(ID, c_SHAPS)))
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
View(shaps_all)
# get a file only with the shaps
shaps_all<-vector()
for (number in 1:length(data_files)){
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
c_file$BDI_score<-c_quest$BDI_score
c_file$SHAPS_score<-c_quest$SHAPS_score
c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
# now the ID
c_file$ID<-number
# now save it
write.csv(c_file, paste0(dirname(path_to_data), "/data_RL_screen_scoring/",
paste0(number, ".csv")), row.names = F)
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# get the ID
ID<-substring <- sub(" .*", "", file_name)
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
}
# plot the shaps all
ggplot(shaps_all, aes(x = c_SHAPS))+
geom_hist()+
theme_classic()+
facet_wrap(.~ID)
library(ggplot2)
# plot the shaps all
ggplot(shaps_all, aes(x = c_SHAPS))+
geom_hist()+
theme_classic()+
facet_wrap(.~ID)
# plot the shaps all
ggplot(shaps_all, aes(x = c_SHAPS))+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
str(shaps_all)
# plot the shaps all
shaps_all$c_SHAPS<-as.numeric(shaps_all$c_SHAPS)
ggplot(shaps_all, aes(x = c_SHAPS))+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
ggplot(shaps_all, aes(x = c_SHAPS), color = ID)+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
ggplot(shaps_all, aes(x = c_SHAPS, color = ID))+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
ggplot(shaps_all, aes(x = c_SHAPS, fill = ID))+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
View(quest)
# now the BDI
c_BDI<-c_file$key_resp_BDI.keys
c_BDI
c_file$key_resp_BDI_trials.keys
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
c_BDI
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
C_BDI<-c_BDI[!is.na(c_BDI)]
new_quest<-vector()
SHAPS<-sum(c_SHAPS)
BDI<-sum(c_BDI)
c_file$key_resp_PANAS_test.keys[!is.na(c_file$key_resp_PANAS_test.keys)]
# now the Panas
PANAS<-sum(c_file$key_resp_PANAS_test.keys[!is.na(c_file$key_resp_PANAS_test.keys)] )
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos")] )
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos"] )
PANAS_pos
new_quest<-rbind(new_quest, as.data.frame(cbind( ID, SHAPS, BDI, PANAS_pos)))
View(new_quest)
C_BDI
BDI<-sum(c_BDI)
BDI
sum(c_BDI)
class(c_BDI)
BDI<-sum(as.numeric(c_BDI))
as.numeric(c_BDI)
c_BDI<-c_BDI[!is.na(c_BDI)]
BDI<-sum(c_BDI)
ith the shaps
# get a file only with the shaps
shaps_all<-vector()
new_quest<-vector()
for (number in 1:length(data_files)){
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
c_file$BDI_score<-c_quest$BDI_score
c_file$SHAPS_score<-c_quest$SHAPS_score
c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
# now the ID
c_file$ID<-number
# now save it
write.csv(c_file, paste0(dirname(path_to_data), "/data_RL_screen_scoring/",
paste0(number, ".csv")), row.names = F)
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
c_BDI<-c_BDI[!is.na(c_BDI)]
SHAPS<-sum(c_SHAPS)
BDI<-sum(c_BDI)
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos"] )
# get thec_BDI# get the ID
ID<-substring <- sub(" .*", "", file_name)
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
new_quest<-rbind(new_quest, as.data.frame(cbind( ID, SHAPS, BDI, PANAS_pos)))
}
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "ls", size = 2, color = "red")+
theme_classic()+
ggtitle("Correlation between SHAPS and BDI")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm", linewidth = 2, color = "red")+
theme_classic()+
ggtitle("Correlation between SHAPS and BDI")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
theme_classic()+
ggtitle("Correlation between SHAPS and BDI")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and BDI")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth()+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()+
#------------------------------------------------------------------------------#
path_to_data2<-paste0(dirname(path_to_data), "/data_RL_screen_scoring/")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth()+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
# now create the scatterplots
str(new_quest)
# now create the scatterplots
new_quest$SHAPS<-as.numeric(new_quest$SHAPS)
new_quest$PANAS_pos<-as.numeric(new_quest$PANAS_pos)
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth()+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
str(new_quest)
new_quest$BDI<-as.numeric(new_quest$BDI)
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys[c_file$control_SHAPS==0]
c_SHAPS
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys[c_file$control_SHAPS==0]
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
c_SHAPS
for (number in 1:length(data_files)){
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
c_file$BDI_score<-c_quest$BDI_score
c_file$SHAPS_score<-c_quest$SHAPS_score
c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
# now the ID
c_file$ID<-number
# now save it
write.csv(c_file, paste0(dirname(path_to_data), "/data_RL_screen_scoring/",
paste0(number, ".csv")), row.names = F)
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys[c_file$control_SHAPS==0]
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
c_BDI<-c_BDI[!is.na(c_BDI)]
SHAPS<-sum(c_SHAPS)
BDI<-sum(c_BDI)
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos"] )
# get thec_BDI# get the ID
ID<-substring <- sub(" .*", "", file_name)
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
new_quest<-rbind(new_quest, as.data.frame(cbind( ID, SHAPS, BDI, PANAS_pos)))
}
# now create the scatterplots
new_quest$SHAPS<-as.numeric(new_quest$SHAPS)
new_quest$BDI<-as.numeric(new_quest$BDI)
new_quest$PANAS_pos<-as.numeric(new_quest$PANAS_pos)
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
# correlation between SHAPS and PANAS pos
ggplot(data = new_quest, aes(x = SHAPS, y = PANAS_pos))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and pos PANAS")+
theme_classic()
View(new_quest)
c_SHAPS
sum(c_SHAPS)
c_quest$PANAS_pos
source("C:/Users/fpupillo/OneDrive - Tilburg University/Projects/RL_Reversal_depression/00_check_data.R")
View(new_quest)
56-new_quest$SHAPS
