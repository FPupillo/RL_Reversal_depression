which(probs[block,1:2]==max(probs[block,1:2]))
probs[block,1:2]
probs[block,1:2]==max(probs[block,1:2])
View(probs)
View(probs)
rew_loss
probs[block,1:2]
block
block1
probs[block,1:2]
View(probs)
View(data1)
View(probs)
View(data1)
View(probs)
View(probs)
# counter for the trials
counter_trial<-1
# invert the prob
probs<-matrix(ncol=4, nrow = (Nswitch+1))
rew_loss<-if (ord == "rewTopun"){c(1,-1)}else{ c(-1,1)}
for (n in 1:(Nswitch+1)){
if (n%%2!=0){
probs[n,]<-c(rew_loss[n],0, rew_loss[n],0)
} else
probs[n,]<-c(rew_loss[n],0,rew_loss[n],0)
}
for (block in 1:(Nswitch+1)){
df$outcome_symbol1[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,1:2],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$outcome_symbol2[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,3:4],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$optimal_response[counter_trial:(counter_trial+(Ntrials-1))]<-
which(probs[block,1:2]==max(probs[block,1:2]))
counter_trial<-counter_trial+Ntrials
}
View(df)
View(probs)
# counter for the trials
counter_trial<-1
# invert the prob
probs<-matrix(ncol=4, nrow = (Nswitch+1))
rew_loss<-if (ord == "rewTopun"){c(1,-1)}else{ c(-1,1)}
for (n in 1:(Nswitch+1)){
if (n%%2!=0){
probs[n,]<-c(rew_loss[n],0, rew_loss[n],0)
} else
probs[n,]<-c(rew_loss[n],0,rew_loss[n],0)
}
block<-1
probs[block,1:2]
probs[block,3:4]
probs
for (n in 1:(Nswitch+1)){
if (n%%2!=0){
probs[n,]<-c(rew_loss[n],0, 0,rew_loss[n])
} else
probs[n,]<-c(rew_loss[n],0,0, rew_loss[n])
}
for (block in 1:(Nswitch+1)){
df$outcome_symbol1[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,1:2],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$outcome_symbol2[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,3:4],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$optimal_response[counter_trial:(counter_trial+(Ntrials-1))]<-
which(probs[block,1:2]==max(probs[block,1:2]))
counter_trial<-counter_trial+Ntrials
}
View(df)
# create the reward for each symbol
df$outcome_symbol1<-NA
df$outcome_symbol2<-NA
# counter for the trials
counter_trial<-1
# invert the prob
probs<-matrix(ncol=4, nrow = (Nswitch+1))
rew_loss<-if (ord == "rewTopun"){c(1,-1)}else{ c(-1,1)}
for (n in 1:(Nswitch+1)){
if (n%%2!=0){
probs[n,]<-c(rew_loss[n],0, 0,rew_loss[n])
} else
probs[n,]<-c(rew_loss[n],0,0, rew_loss[n])
}
for (block in 1:(Nswitch+1)){
df$outcome_symbol1[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,1:2],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$outcome_symbol2[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,3:4],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$optimal_response[counter_trial:(counter_trial+(Ntrials-1))]<-
which(probs[block,1:2]==max(abs(probs[block,1:2])))
counter_trial<-counter_trial+Ntrials
}
# counter for the trials
counter_trial<-1
# invert the prob
probs<-matrix(ncol=4, nrow = (Nswitch+1))
rew_loss<-if (ord == "rewTopun"){c(1,-1)}else{ c(-1,1)}
for (n in 1:(Nswitch+1)){
if (n%%2!=0){
probs[n,]<-c(rew_loss[n],0, 0,rew_loss[n])
} else
probs[n,]<-c(rew_loss[n],0,0, rew_loss[n])
}
for (block in 1:(Nswitch+1)){
df$outcome_symbol1[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,1:2],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$outcome_symbol2[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,3:4],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$optimal_response[counter_trial:(counter_trial+(Ntrials-1))]<-
which(probs[block,1:2]==max(abs(probs[block,1:2])))
counter_trial<-counter_trial+Ntrials
}
abs(probs[block,1:2])
max(abs(probs[block,1:2])
max(abs(probs[block,1:2]))
which(probs[block,1:2]==max(abs(probs[block,1:2])))
robs[block,1:2]
probs[block,1:2]
which(abs(probs[block,1:2])==max(abs(probs[block,1:2])))
abs(probs[block,1:2])
probs[block,1:2]
max(probs[block,1:2]))
max(probs[block,1:2])
# counter for the trials
counter_trial<-1
# invert the prob
probs<-matrix(ncol=4, nrow = (Nswitch+1))
rew_loss<-if (ord == "rewTopun"){c(1,-1)}else{ c(-1,1)}
for (n in 1:(Nswitch+1)){
if (n%%2!=0){
probs[n,]<-c(rew_loss[n],0, 0,rew_loss[n])
} else
probs[n,]<-c(rew_loss[n],0,0, rew_loss[n])
}
for (block in 1:(Nswitch+1)){
df$outcome_symbol1[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,1:2],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$outcome_symbol2[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,3:4],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$optimal_response[counter_trial:(counter_trial+(Ntrials-1))]<-
which(probs[block,1:2]==max(probs[block,1:2]))
counter_trial<-counter_trial+Ntrials
}
# create optimal choice symbol
df$optimal_symbol<-ifelse(df$optimal_response==1, "symbol_left", "symbol_right")
View(df)
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/taskSim.R")
# tget the data structure
data1<-taskSim(Preward = 0.80, Ploss=0.80,  ord = "rewTopun",Ntrials =30)
data2<-taskSim(Preward = 0.80, Ploss=0.80,  ord = "punTorew",Ntrials =30)
# bind the two
data<-rbind(data1, data2)
View(data)
View(data2)
View(data1)
data2$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials, prob = c(0.5, 0.5))
# detect cores for runnning in parallel
cores=detectCores()
# create for which symbol we show the outcome
data1$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials, prob = c(0.5, 0.5))
# create for which symbol we show the outcome
data1$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials,
prob = c(0.5, 0.5), replace=T)
data2$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials,
prob = c(0.5, 0.5), replace = T)
View(data1)
data1$outcome_probe
data1[, data1$outcome_probe]
data1$outcome_probe
data1[1, "left_symbol"]
data1[1, "symbol_left"]
data1$outcome<-ifelse(data1$outcome_probe=="symbol_left", data1$outcome_symbol1,
data1$outcome_symbol2)
data2$outcome<-ifelse(data2$outcome_probe=="symbol_left", data2$outcome_symbol1,
data2$outcome_symbol2)
sim1<-sim_model(Data=data1, alphapos = ap, alphaneg = an,
beta=beta[sims],
initialV = 0)
Data<-data1
ap
a
an
beta
betaa=beta[1]
beta<-2
initialV = 0)
initialV = 0
View(sim_model)
for (n in 1:2){
# Initialize variables: Vs, the expected values
Data[[paste("V", n, sep="")]]<-NA
}
# Delta, prediction error
Data$Delta<-NA
# participants' response
Data$response<-NA
# reward
Data$reward<-NA
# reward
Data$reward<-NA
# index variables for Q, P, and Delta
Vindex<-c("V1", "V2")
Pindex<-c("P1", "P2")
model<-"RW_pav_2alpha_beta"
sim_model<-get(paste0("simulate_", model))
View(sim_model)
# Delta, prediction error
Data$Delta<-NA
# participants' response
Data$response<-NA
# reward
Data$reward<-NA
# index variables for Q, P, and Delta
Vindex<-c("V1", "V2")
# Counter for indicating which character has to be updated
count<-rep(0, 2)
V<-rep(initialV, 2)
t<-1
names(Data)
Data$outcome_probe[t]
Vindex
V1[t]
Data$V1[t]
V<-rep(initialV, 2)
Data[1, Vindex]<-V
Data[1, Vindex]
# make choice
#Data$response[t] <- chooseBinomial(p)
Data$response[t]<-ifelse(Data$outcome_probe[t]=="symbol_left", Data$V1[t],
Data$V2[t])
Data$response[t]
# make choice
#Data$response[t] <- chooseBinomial(p)
Data$response[t]<-ifelse(Data$outcome_probe[t]=="symbol_left", Data$V1[t],
Data$V2[t])
Data$reward[t]<-as.numeric(
Data[t, c("reward_symbol1", "reward_symbol2")][Data$response[t]]
)
[Data$response[t]]
Data$reward[t]<-as.numeric(
Data[t, c("outcome_symbol1", "outcome_symbol2")][Data$response[t]]
)
Data[t, c("outcome_symbol1", "outcome_symbol2")]
[Data$response[t]]
Data$response[t]
Data$reward[t]<-as.numeric(
Data[t, c("outcome_symbol1", "outcome_symbol2")][Data$out[t]]
)
Data$reward[t]<-as.numeric(
Data[t, c("outcome_symbol1", "outcome_symbol2")][Data$outcome_probe[t]]
)
Data$outcome_probe[t]
Data[t, Data$outcome_probe[t]]
Data$reward[t]<-ifelse(Data$outcome_probe[t] == 'symbol_left',
Data$outcome_symbol1[t], Data$outcome_symbol2[t])
Data$switch_cond
View(data1)
df$switch_cond<-rep(c("acquisition", ord) , each = Ntrials)
df$switch_cond
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/taskSim.R")
# tget the data structure
data1<-taskSim(Preward = 0.80, Ploss=0.80,  ord = "rewTopun",Ntrials =30)
data2<-taskSim(Preward = 0.80, Ploss=0.80,  ord = "punTorew",Ntrials =30)
View(data1)
View(data2)
# create for which symbol we show the outcome
data1$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials,
prob = c(0.5, 0.5), replace=T)
data2$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials,
prob = c(0.5, 0.5), replace = T)
# create the actual outcome
data1$outcome<-ifelse(data1$outcome_probe=="symbol_left", data1$outcome_symbol1,
data1$outcome_symbol2)
data2$outcome<-ifelse(data2$outcome_probe=="symbol_left", data2$outcome_symbol1,
data2$outcome_symbol2)
Data<-data1
for (n in 1:2){
# Initialize variables: Vs, the expected values
Data[[paste("V", n, sep="")]]<-NA
# Ps (probabilities for each category's choice)
#Data[[paste("P", n, sep="")]]<-NA
}
# Delta, prediction error
Data$Delta<-NA
# participants' response
Data$response<-NA
# reward
Data$reward<-NA
# index variables for Q, P, and Delta
Vindex<-c("V1", "V2")
# Counter for indicating which character has to be updated
count<-rep(0, 2)
V<-rep(initialV, 2)
Data[1, Vindex]<-V
t<-1
# make choice
#Data$response[t] <- chooseBinomial(p)
Data$response[t]<-ifelse(Data$outcome_probe[t]=="symbol_left", Data$V1[t],
Data$V2[t])
Data$reward[t]<-ifelse(Data$outcome_probe[t] == 'symbol_left',
Data$outcome_symbol1[t], Data$outcome_symbol2[t])
0-1
#------------------------------------------------------------------------------#
# simulate data with different models
# [1] "Fri Nov 18 17:38:39 2022"
#------------------------------------------------------------------------------#
rm(list=ls())
library(ggplot2)
library(dplyr)
library(gridExtra)
library(foreach)
library(doParallel)
library(viridis)
for (fun in list.files("helper_functions")){
source(paste0("helper_functions/", fun))
}
# get the simulating models
for (model in list.files("simulation_functions")){
source(paste0("simulation_functions/",model))
}
model<-"RW_pav_2alpha_beta"
sim_model<-get(paste0("simulate_", model))
# simulate behaviour at different alpha values and beta
sims<-10
alphapos<-seq(0.1, 1, length.out =sims)
alphaneg<-seq(0.1, 1, length.out =sims)
beta<-seq(2, 2, length.out = sims)
View(simulate_RW_2alpha_beta)
View(simulate_RW_pav_2alpha_beta)
View(taskSim)
#------------------------------------------------------------------------------#
# simulate data with different models
# [1] "Fri Nov 18 17:38:39 2022"
#------------------------------------------------------------------------------#
rm(list=ls())
library(ggplot2)
library(dplyr)
library(gridExtra)
library(foreach)
library(doParallel)
library(viridis)
for (fun in list.files("helper_functions")){
source(paste0("helper_functions/", fun))
}
# get the simulating models
for (model in list.files("simulation_functions")){
source(paste0("simulation_functions/",model))
}
model<-"RW_pav_2alpha_beta"
sim_model<-get(paste0("simulate_", model))
# simulate behaviour at different alpha values and beta
sims<-10
alphapos<-seq(0.1, 1, length.out =sims)
alphaneg<-seq(0.1, 1, length.out =sims)
beta<-seq(2, 2, length.out = sims)
# virtual part
part<-1:sims
# create the reward for each symbol
df$outcome_symbol1<-NA
df$outcome_symbol2<-NA
# define the symbols
symbols<-c("symbol_1", "symbol_2")
# define the data frame
df<-as.data.frame(matrix(NA, ncol = 3, nrow = Ntrials*(Nswitch+1)))
Preward =0.80
Ploss = 0.80
Nswitch = 1
ord = "rewTopun"
Ntrials =30
symbols<-c("symbol_1", "symbol_2")
# define the data frame
df<-as.data.frame(matrix(NA, ncol = 3, nrow = Ntrials*(Nswitch+1)))
df[,1]<-1:nrow(df)
df[,2]<-symbols[1]
df[,3]<-symbols[2]
names(df)<-c("trialN", "symbol_left", "symbol_right")
df$switch_cond<-rep(c("acquisition", ord) , each = Ntrials)
# create the reward for each symbol
df$outcome_symbol1<-NA
df$outcome_symbol2<-NA
# counter for the trials
counter_trial<-1
# invert the prob
probs<-matrix(ncol=4, nrow = (Nswitch+1))
rew_loss<-if (ord == "rewTopun"){c(0,-1)}else{ c(1,0)}
for (n in 1:(Nswitch+1)){
if (n%%2!=0){
probs[n,]<-c(rew_loss[n],0, 0,rew_loss[n])
} else
probs[n,]<-c(rew_loss[n],0,0, rew_loss[n])
}
View(probs)
#------------------------------------------------------------------------------#
# simulate data with different models
# [1] "Fri Nov 18 17:38:39 2022"
#------------------------------------------------------------------------------#
rm(list=ls())
library(ggplot2)
library(dplyr)
library(gridExtra)
library(foreach)
library(doParallel)
library(viridis)
for (fun in list.files("helper_functions")){
source(paste0("helper_functions/", fun))
}
# get the simulating models
for (model in list.files("simulation_functions")){
source(paste0("simulation_functions/",model))
}
model<-"RW_pav_2alpha_beta"
sim_model<-get(paste0("simulate_", model))
# simulate behaviour at different alpha values and beta
sims<-10
alphapos<-seq(0.1, 1, length.out =sims)
alphaneg<-seq(0.1, 1, length.out =sims)
beta<-seq(2, 2, length.out = sims)
# virtual part
part<-1:sims
# tget the data structure
data1<-taskSim(Preward = 0.75, Ploss=0.75,  ord = "rewTopun",Ntrials =30)
View(data1)
Preward =0.80
Ploss = 0.80
Nswitch = 1
Ntrials =30
# define the symbols
symbols<-c("symbol_1", "symbol_2")
# define the data frame
df<-as.data.frame(matrix(NA, ncol = 3, nrow = Ntrials*(Nswitch+1)))
df[,1]<-1:nrow(df)
df[,2]<-symbols[1]
df[,3]<-symbols[2]
names(df)<-c("trialN", "symbol_left", "symbol_right")
df$switch_cond<-rep(c("acquisition", ord) , each = Ntrials)
ord = "rewTopun"
df$switch_cond<-rep(c("acquisition", ord) , each = Ntrials)
# create the reward for each symbol
df$outcome_symbol1<-NA
df$outcome_symbol2<-NA
# counter for the trials
counter_trial<-1
# invert the prob
probs<-matrix(ncol=4, nrow = (Nswitch+1))
rew_loss<-if (ord == "rewTopun"){c(1, -1)}else{ c(-1,1)}
probs[n,]<-c(rew_loss[n], 0 ,0, rew_loss[n])
c(rew_loss[n], 0 ,0, rew_loss[n])
for (n in 1:(Nswitch+1)){
if (n%%2!=0){
probs[n,]<-c(rew_loss[n], 0 ,0, rew_loss[n])
} else
probs[n,]<-c(rew_loss[n],0,0, rew_loss[n])
}
View(probs)
block<-1
sample(probs[block,1:2],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
for (block in 1:(Nswitch+1)){
df$outcome_symbol1[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,1:2],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$outcome_symbol2[counter_trial:(counter_trial+(Ntrials-1))]<-
sample(probs[block,3:4],Ntrials, prob = c(Preward, 1-Preward),
replace = T)
df$optimal_response[counter_trial:(counter_trial+(Ntrials-1))]<-
which(probs[block,1:2]==max(probs[block,1:2]))
counter_trial<-counter_trial+Ntrials
}
View(df)
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/taskSim.R")
data2<-taskSim(Preward = 0.75, Ploss=0.75,  ord = "punTorew",Ntrials =30)
View(data2)
# create for which symbol we show the outcome
data1$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials,
prob = c(0.5, 0.5), replace=T)
data2$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials,
prob = c(0.5, 0.5), replace = T)
data1$outcome_probe
# create the actual outcome
data1$outcome<-ifelse(data1$outcome_probe=="symbol_left", data1$outcome_symbol1,
data1$outcome_symbol2)
data1$outcome
View(data1)
# tget the data structure
data1<-taskSim(Preward = 0.75, Ploss=0.75,  ord = "rewTopun",Ntrials =30)
View(data1)
# create for which symbol we show the outcome
data1$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials,
prob = c(0.5, 0.5), replace=T)
data2$outcome_probe<-sample(c("symbol_left", "symbol_right"), Ntrials,
prob = c(0.5, 0.5), replace = T)
# create the actual outcome
data1$outcome<-ifelse(data1$outcome_probe=="symbol_left", data1$outcome_symbol1,
data1$outcome_symbol2)
data2$outcome<-ifelse(data2$outcome_probe=="symbol_left", data2$outcome_symbol1,
data2$outcome_symbol2)
View(data1)
# bind the two
data<-rbind(data1, data2)
# tget the data structure
data1<-taskSim(Preward = 0.75, Ploss=0.75,  ord = "rewTopun",Ntrials =30)
60*10.28
