}
# probability for the choice that participants' made on a trial
#Data$Prob<-NA
# Delta, prediction error
Data$Delta<-NA
# participants' response
Data$response<-NA
# reward
Data$reward<-NA
# index variables for Q, P, and Delta
Vindex<-c("V1", "V2")
# current V
Data$currV<-NA
# Counter for indicating which character has to be updated
count<-rep(0, 2)
# initialise choice probability and counter for the choiceprobability
#prob<-NA
V<-rep(initialV, 2)
Data[1, Vindex]<-V
# get the highlighted
# likelihood
Data$likel<-NA
# loop over trials
for (t in 1:nrow(Data)){
# update choice probabilities using the softmax distribution
#p<-softmax(V, beta)
# make choice
#Data$response[t] <- chooseBinomial(p)
# if the probe is left, 1, else,2
which_symb<-ifelse(Data$outcome_probe[t]=="symbol_left", 1,2)
Data$response[t]<-V[which_symb]
Data$reward[t]<-ifelse(Data$outcome_probe[t] == 'symbol_left',
Data$outcome_symbol1[t], Data$outcome_symbol2[t])
# get the observation as 1 if that category is present, and 0 if it is not
if (Data$switch_cond[t]=="reward" | Data$switch_cond[t]=="punTorew"){
if ( Data$reward[t]>0){
alpha <- alphapos
Data$reward[t]<-1
} else {
alpha<-alphaneg
Data$reward[t]<-0
}
} else{
if ( Data$reward[t]<0){
alpha <- alphaneg
Data$reward[t]<-0
} else {
alpha<-alphapos
Data$reward[t]<-1
}
}
# update values
updateVal<-update_RW(r = Data$reward[t], V = Data$response[t], alpha = alpha)
# update V
V[which_symb]<-updateVal$V
# assign it to the dataset
Data$Delta[t]<-updateVal$delta
# assign values to the dataset
Data[t, Vindex]<-V
Data$currV[t]<-V[which_symb]
}
# regress the estimated value on the actual value
reg<-lm(Data$reward~Data$currV)
NegLL<- -logLik(reg)
if (print ==1){
return(NegLL)
} else if (print==2){
return(Data)}
}
data<-sim1
X0<-c( runif(1),  runif(1))  # rexp generates random numbers from the exponential
#  distributon with mean 1
LB<-c(alphaposBound[1],alphanegBound[1]) # lower boundary
UB<-c(alphaposBound[2], alphanegBound[2])
obfunc<-function(x) likelihood_RW_pav_2alpha_beta(data, alphapos = x[1] , alphaneg = x[2],
initialV=0.5, print = 1) # this function
# Find best-fitting parameters
NegLL<-optim(X0, obfunc, method = "L-BFGS-B",lower = LB, upper=UB)
NegLL
alphapos[1\]
alphapos[1]
alphaneg[1]
alphapos
alphapos=0.33
alphaneg=0.5
for (n in 1:2){
# Initialize variables: Vs, the expected values
Data[[paste("V", n, sep="")]]<-NA
# Ps (probabilities for each category's choice)
#Data[[paste("P", n, sep="")]]<-NA
}
# Delta, prediction error
Data$Delta<-NA
Data<-sim1
for (n in 1:2){
# Initialize variables: Vs, the expected values
Data[[paste("V", n, sep="")]]<-NA
# Ps (probabilities for each category's choice)
#Data[[paste("P", n, sep="")]]<-NA
}
# Delta, prediction error
Data$Delta<-NA
# participants' response
Data$response<-NA
# reward
Data$reward<-NA
# index variables for Q, P, and Delta
Vindex<-c("V1", "V2")
# current V
Data$currV<-NA
# Counter for indicating which character has to be updated
count<-rep(0, 2)
V<-rep(initialV, 2)
initialV<-0.5
V<-rep(initialV, 2)
Data[1, Vindex]<-V
# likelihood
Data$likel<-NA
t<-1
# if the probe is left, 1, else,2
which_symb<-ifelse(Data$outcome_probe[t]=="symbol_left", 1,2)
Data$response[t]<-V[which_symb]
Data$reward[t]<-ifelse(Data$outcome_probe[t] == 'symbol_left',
Data$outcome_symbol1[t], Data$outcome_symbol2[t])
# loop over trials
for (t in 1:nrow(Data)){
# update choice probabilities using the softmax distribution
#p<-softmax(V, beta)
# make choice
#Data$response[t] <- chooseBinomial(p)
# if the probe is left, 1, else,2
which_symb<-ifelse(Data$outcome_probe[t]=="symbol_left", 1,2)
Data$response[t]<-V[which_symb]
Data$reward[t]<-ifelse(Data$outcome_probe[t] == 'symbol_left',
Data$outcome_symbol1[t], Data$outcome_symbol2[t])
# get the observation as 1 if that category is present, and 0 if it is not
if (Data$switch_cond[t]=="reward" | Data$switch_cond[t]=="punTorew"){
if ( Data$reward[t]>0){
alpha <- alphapos
Data$reward[t]<-1
} else {
alpha<-alphaneg
Data$reward[t]<-0
}
} else{
if ( Data$reward[t]<0){
alpha <- alphaneg
Data$reward[t]<-0
} else {
alpha<-alphapos
Data$reward[t]<-1
}
}
# update values
updateVal<-update_RW(r = Data$reward[t], V = Data$response[t], alpha = alpha)
# update V
V[which_symb]<-updateVal$V
# assign it to the dataset
Data$Delta[t]<-updateVal$delta
# assign values to the dataset
Data[t, Vindex]<-V
Data$currV[t]<-V[which_symb]
}
Data$currV
Data$reward
# regress the estimated value on the actual value
reg<-lm(Data$reward~Data$currV)
reg
logLik(reg)
alphapos
alphapos=1
# reward
Data$reward<-NA
# index variables for Q, P, and Delta
Vindex<-c("V1", "V2")
# current V
Data$currV<-NA
# Counter for indicating which character has to be updated
count<-rep(0, 2)
V<-rep(initialV, 2)
Data[1, Vindex]<-V
# likelihood
Data$likel<-NA
# loop over trials
for (t in 1:nrow(Data)){
# update choice probabilities using the softmax distribution
#p<-softmax(V, beta)
# make choice
#Data$response[t] <- chooseBinomial(p)
# if the probe is left, 1, else,2
which_symb<-ifelse(Data$outcome_probe[t]=="symbol_left", 1,2)
Data$response[t]<-V[which_symb]
Data$reward[t]<-ifelse(Data$outcome_probe[t] == 'symbol_left',
Data$outcome_symbol1[t], Data$outcome_symbol2[t])
# get the observation as 1 if that category is present, and 0 if it is not
if (Data$switch_cond[t]=="reward" | Data$switch_cond[t]=="punTorew"){
if ( Data$reward[t]>0){
alpha <- alphapos
Data$reward[t]<-1
} else {
alpha<-alphaneg
Data$reward[t]<-0
}
} else{
if ( Data$reward[t]<0){
alpha <- alphaneg
Data$reward[t]<-0
} else {
alpha<-alphapos
Data$reward[t]<-1
}
}
# update values
updateVal<-update_RW(r = Data$reward[t], V = Data$response[t], alpha = alpha)
# update V
V[which_symb]<-updateVal$V
# assign it to the dataset
Data$Delta[t]<-updateVal$delta
# assign values to the dataset
Data[t, Vindex]<-V
Data$currV[t]<-V[which_symb]
}
# regress the estimated value on the actual value
reg<-lm(Data$reward~Data$currV)
NegLL<- -logLik(reg)
NegLL
NegLL<- -logLik(reg)
NegLL
?logLik
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/likelihood_functions/likelihood_RW_pav_2alpha_beta.R")
X0<-c( runif(1),  runif(1))  # rexp generates random numbers from the exponential
#  distributon with mean 1
LB<-c(alphaposBound[1],alphanegBound[1]) # lower boundary
UB<-c(alphaposBound[2], alphanegBound[2])
obfunc<-function(x) likelihood_RW_pav_2alpha_beta(data, alphapos = x[1] , alphaneg = x[2],
initialV=0.5, print = 1) # this function
# Find best-fitting parameters
NegLL<-optim(X0, obfunc, method = "L-BFGS-B",lower = LB, upper=UB)
NegLL
View(sim1)
V[which_symb]
t<-1
# if the probe is left, 1, else,2
which_symb<-ifelse(Data$outcome_probe[t]=="symbol_left", 1,2)
Data$response[t]<-V[which_symb]
Data$reward[t]<-ifelse(Data$outcome_probe[t] == 'symbol_left',
Data$outcome_symbol1[t], Data$outcome_symbol2[t])
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/likelihood_functions/likelihood_RW_pav_2alpha_beta.R")
for (s in 1:simul){
simData<-vector()
#for (ap in alphapos){
# for (an in alphaneg){
sim1<-sim_model(Data=data1, alphapos = alphapos[s], alphaneg = alphaneg[s],
beta=beta[s],
initialV = 0.5)
sim2<-sim_model(Data=data2, alphapos = alphapos[s], alphaneg = alphaneg[s],
beta=beta[sims],
initialV = 0.5)
# assign the values
sim1$alphapos<-alphapos[s]
sim1$alphaneg<-alphaneg[s]
sim2$alphapos<-alphapos[s]
sim2$alphaneg<-alphaneg[s]
#sim$part<-sims
#simData<-rbind(sim1, sim2)
part<-part+1
curr_sim<-curr_sim+1
# now we need to fit
fit1<-fit_RW_pav_2alpha_beta(sim1,alphaposBound = alphaposBound,
alphanegBound = alphanegBound,
initialV=0.5)
fit2<-fit_RW_pav_2alpha_beta(sim2,alphaposBound = alphaposBound,
alphanegBound = alphanegBound,
initialV=0.5)
fit1$alphapos<-fit1$alpha[1]
fit1$alphaneg<-fit1$alpha[2]
fit2$alphapos<-fit2$alpha[1]
fit2$alphaneg<-fit2$alpha[2]
sim_all[s, ]<-c(alphapos[s], alphaneg[s], fit1$alpha[1], fit1$alpha[2],
fit2$alpha[1], fit2$alpha[2] )
}
# assign names
names(sim_all)<-c("sim_alphapos", "sim_alphaneg", "fit_alphapos_rew_to_pun",
"fit_alphaneg_rew_to_pun",  "fit_alphapos_pun_to_rews",
"fit_alphaneg_pun_to_rew")
plotalphapos_rew_to_pun<-ggplot(sim_all, aes(x=sim_alphapos, y=fit_alphapos_rew_to_pun)) +
geom_point()+
geom_smooth(method=lm)+
theme_bw()+
stat_cor(method="pearson")+
#stat_cor(method = "pearson", label.x = 3, label.y = 30)+
ggtitle("U parameter")
plotalphapos_rew_to_pun
sim_all
data()
time()
date()
#------------------------------------------------------------------------------#
# extract memory data
#
# written by Francesco Pupillo
#
# [1] "Mon May  8 17:45:40 2023"
#
#------------------------------------------------------------------------------#
rm(list=ls())
data_path<-"~/PowerFolders/RL_reversal_depression/experiment_tuerk/data/"
files<-list.files(data_path)
data_path<-"~/PowerFolders/RL_reversal_depression/experiment_tuerk/data/"
files<-list.files(data_path)
setwd(data_path)
data_path<-"~/PowerFolders/Frankfurt_University/RL_reversal_depression/experiment_tuerk/data/"
files<-list.files(data_path)
files<-list.files(data_path, pattern = ".csv")
files
getwd()
# source file with the functions to get memory data
source("helper_functions/sign_det.R")
f<-files[1]
# get the data
c_df<-read.csv(f)
# get the data
c_df<-read.csv(paste0(data_path,"/", f))
View(c_df)
# subset only the memory data
c_df_mem<-c_df[!is.na(c_df$Memory_cond),]
# create old/new response
c_df_mem$rec_resp<-ifelse(c_df_mem$key_resp.keys>3, "old", "new")
View(sign_det)
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/sign_det.R")
# get memory discrimination performance
mem_disc<-sign_det(c_df_mem)
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/sign_det.R")
# get memory discrimination performance
mem_disc<-sign_det(c_df_mem)
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/sign_det.R")
# get memory discrimination performance
mem_disc<-sign_det(c_df_mem)
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/sign_det.R")
namesf
names(f)
f
# get the sub num
c_sub<-unique(c_df$participant)
# get memory discrimination performance
mem_disc<-sign_det(df = c_df_mem, sub_n = c_sub)
View(mem_disc)
View(mem_disc)
df<-c_df_mem
#----------------------------------------------------------------------------#
# create signal detection values
#----------------------------------------------------------------------------#
#
# calculate dprime
library(psycho)
# compute accuracy
df$recog_acc<-NA
df$Memory_cond
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/sign_det.R")
# get memory discrimination performance
mem_disc<-sign_det(df = c_df_mem, sub_n = c_sub)
# get memory discrimination performance
mem_disc<-sign_det(df = c_df_mem, sub_n = c_sub)
df
# compute accuracy
df$recog_acc<-NA
df$Memory_cond
# compute accuracy
df$recog_acc<-NA
# compute accuracy
df$recog_acc<-NA
for (n in 1:nrow(df)){
if (!is.na(df$Memory_cond[n])){
if (df$Memory_cond[n] == "Old"){
if (df$key_resp.keys[n]>=4){
df$recog_acc[n]<- 1 }else{   df$recog_acc[n]<- 0}
}else if(df$Memory_cond[n] == "New"){
if (df$key_resp.keys[n]<4){
df$recog_acc[n]<- 1 }else{   df$recog_acc[n]<- 0}
}
}
}
df$recog_acc
# recognition
# calculate hit, miss, rej, and FA
df$recog_type<-NA
for ( i in 1:nrow(df)){
if (df$Memory_cond[i]=="Old"& df$recog_acc[i]==1 ){
df$recog_type[i]<-"HIT"
} else if (df$Memory_cond[i]=="Old"& df$recog_acc[i]==0 ){
df$recog_type[i]<-"Miss"
} else if(df$Memory_cond[i]=="New"& df$recog_acc[i]==1  ){
df$recog_type[i]<-"CorrRej"
} else if (df$Memory_cond[i]=="New"& df$recog_acc[i]=="0" ){
df$recog_type[i]<-"FA"
}
}
VoI<-c("recog_type")
# wide dataset
wideData<-table(df[,VoI])
# convert it to a data.frame
wideData<-as.data.frame(rbind(wideData))
# check if there are any null values
vars<-c("CorrRej", "HIT", "Miss", "FA")
for (var in vars){
if(! any(names(wideData)==var)){ # if we do not have any occurrence, we create it
wideData[[var]]<-0
}
}
wideData
source("~/PowerFolders/Frankfurt_University/rev_aned(steffi_thesis)/helper_functions/sign_det.R")
# get memory discrimination performance
mem_disc<-sign_det(df = c_df_mem, sub_n = c_sub)
mem_disc
# create an empty object
all_data_mem<-NA
# counter<-
counter<-1
# counter for the iterations
counter<-1
# loop through the files
for (f in files){
# catch any errors that there migth be
tryCatch({
# get the data
c_df<-read.csv(paste0(data_path,"/", f))
# subset only the memory data
c_df_mem<-c_df[!is.na(c_df$Memory_cond),]
# create old/new response
c_df_mem$rec_resp<-ifelse(c_df_mem$key_resp.keys>3, "old", "new")
# get the sub num
c_sub<-unique(c_df$participant)
# get memory discrimination performance
mem_disc<-sign_det(df = c_df_mem, sub_n = c_sub)
# append to the dataset
all_data_mem<-rbind(all_data_mem, mem_disc)
# return errors
},
error = function(e){paste0("problem with part ", c_sub, ": ", e)}
)
}
View(all_data_mem)
# create an empty object
all_data_mem<-NA
# loop through the files
for (f in files){
# catch any errors that there migth be
tryCatch({
# get the data
c_df<-read.csv(paste0(data_path,"/", f))
# subset only the memory data
c_df_mem<-c_df[!is.na(c_df$Memory_cond),]
# create old/new response
c_df_mem$rec_resp<-ifelse(c_df_mem$key_resp.keys>3, "old", "new")
# get the sub num
c_sub<-unique(c_df$participant)
# get memory discrimination performance
mem_disc<-sign_det(df = c_df_mem, sub_n = c_sub)
# append to the dataset
all_data_mem<-rbind(all_data_mem, mem_disc)
# return errors
},
error = function(e){paste0("problem with part ", c_sub, ": ", e)}
)
}
View(all_data_mem)
# create an empty object
all_data_mem<-list()
# counter for the iterations
counter<-1
# create an empty object
all_data_mem<-list()
# append to the dataset
all_data_mem[[counter]]<-mem_disc
# create an empty object
all_data_mem<-list()
# counter for the iterations
counter<-1
# counter for the iterations
counter<-1
# loop through the files
for (f in files){
# catch any errors that there migth be
tryCatch({
# get the data
c_df<-read.csv(paste0(data_path,"/", f))
# subset only the memory data
c_df_mem<-c_df[!is.na(c_df$Memory_cond),]
# create old/new response
c_df_mem$rec_resp<-ifelse(c_df_mem$key_resp.keys>3, "old", "new")
# get the sub num
c_sub<-unique(c_df$participant)
# get memory discrimination performance
mem_disc<-sign_det(df = c_df_mem, sub_n = c_sub)
# append to the dataset
all_data_mem[[counter]]<-mem_disc
# update the coutner
counter<-counter+1
# return errors
},
error = function(e){paste0("problem with part ", c_sub, ": ", e)}
)
}
?do.call
# unpack the list
all_df<-do.call(rbind, all_data_mem)
View(all_df)
# delet the rownames
rownames(all_df)<-NULL
View(all_df)
# save the output
write.csv(all_df, "output_folder/mem_perf.csv")
