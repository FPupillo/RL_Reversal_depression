anova(model_wide_SHAPS)
# learning rate
model_wide_BDI<-lm(rev_PminusN~gain_loss_asym*BDI, data = memory_data_wide)
anova(model_wide_BDI)
corrplot(mydata.cor)
View(data2)
rm(list=ls())
library(dplyr)
library(ggplot2)
library(Rmisc)
library(lme4)
library(car)
source("helper_functions/cum_acc_window.R")
# we are using the data that Stefanie said they have RL scoring above chance
path_to_data<-"~/PowerFolders/Frankfurt_University/rev_aned_steffi_thesis/data_RL_screen"
# get the data
data_files<-list.files(path_to_data, pattern = ".csv")
#questionnaires files
quest<-read.csv(paste0(dirname(path_to_data), "/", "Output_scales_39.csv"))
number<-1
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# get the data
data_files<-list.files(path_to_data, pattern = ".csv")
path_to_data<-paste0(getwd(), "/data_RL_screen")
# get the data
data_files<-list.files(path_to_data, pattern = ".csv")
dirname(path_to_data)
#questionnaires files
quest<-read.csv(paste0(dirname(path_to_data), "/", "Output_scales_39.csv"))
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
c_file$BDI_score<-c_quest$BDI_score
c_file$SHAPS_score<-c_quest$SHAPS_score
c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
c_file$key_resp_Instr_SHAPS.keys
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys
c_SHAPS
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# get a file only with the shaps
shaps_all<-vector()
number
View(quest)
file_name
file_name[1]
ID<-substring <- sub(" .*", "", file_name)
shaps_all<-rbind(shaps_all, as.data.fame(cbind(ID, c_SHAPS)))
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
View(shaps_all)
# get a file only with the shaps
shaps_all<-vector()
for (number in 1:length(data_files)){
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
c_file$BDI_score<-c_quest$BDI_score
c_file$SHAPS_score<-c_quest$SHAPS_score
c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
# now the ID
c_file$ID<-number
# now save it
write.csv(c_file, paste0(dirname(path_to_data), "/data_RL_screen_scoring/",
paste0(number, ".csv")), row.names = F)
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# get the ID
ID<-substring <- sub(" .*", "", file_name)
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
}
# plot the shaps all
ggplot(shaps_all, aes(x = c_SHAPS))+
geom_hist()+
theme_classic()+
facet_wrap(.~ID)
library(ggplot2)
# plot the shaps all
ggplot(shaps_all, aes(x = c_SHAPS))+
geom_hist()+
theme_classic()+
facet_wrap(.~ID)
# plot the shaps all
ggplot(shaps_all, aes(x = c_SHAPS))+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
str(shaps_all)
# plot the shaps all
shaps_all$c_SHAPS<-as.numeric(shaps_all$c_SHAPS)
ggplot(shaps_all, aes(x = c_SHAPS))+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
ggplot(shaps_all, aes(x = c_SHAPS), color = ID)+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
ggplot(shaps_all, aes(x = c_SHAPS, color = ID))+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
ggplot(shaps_all, aes(x = c_SHAPS, fill = ID))+
geom_histogram()+
theme_classic()+
facet_wrap(.~ID)
View(quest)
# now the BDI
c_BDI<-c_file$key_resp_BDI.keys
c_BDI
c_file$key_resp_BDI_trials.keys
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
c_BDI
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
C_BDI<-c_BDI[!is.na(c_BDI)]
new_quest<-vector()
SHAPS<-sum(c_SHAPS)
BDI<-sum(c_BDI)
c_file$key_resp_PANAS_test.keys[!is.na(c_file$key_resp_PANAS_test.keys)]
# now the Panas
PANAS<-sum(c_file$key_resp_PANAS_test.keys[!is.na(c_file$key_resp_PANAS_test.keys)] )
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos")] )
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos"] )
PANAS_pos
new_quest<-rbind(new_quest, as.data.frame(cbind( ID, SHAPS, BDI, PANAS_pos)))
View(new_quest)
C_BDI
BDI<-sum(c_BDI)
BDI
sum(c_BDI)
class(c_BDI)
BDI<-sum(as.numeric(c_BDI))
as.numeric(c_BDI)
c_BDI<-c_BDI[!is.na(c_BDI)]
BDI<-sum(c_BDI)
ith the shaps
# get a file only with the shaps
shaps_all<-vector()
new_quest<-vector()
for (number in 1:length(data_files)){
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
c_file$BDI_score<-c_quest$BDI_score
c_file$SHAPS_score<-c_quest$SHAPS_score
c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
# now the ID
c_file$ID<-number
# now save it
write.csv(c_file, paste0(dirname(path_to_data), "/data_RL_screen_scoring/",
paste0(number, ".csv")), row.names = F)
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
c_BDI<-c_BDI[!is.na(c_BDI)]
SHAPS<-sum(c_SHAPS)
BDI<-sum(c_BDI)
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos"] )
# get thec_BDI# get the ID
ID<-substring <- sub(" .*", "", file_name)
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
new_quest<-rbind(new_quest, as.data.frame(cbind( ID, SHAPS, BDI, PANAS_pos)))
}
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "ls", size = 2, color = "red")+
theme_classic()+
ggtitle("Correlation between SHAPS and BDI")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm", linewidth = 2, color = "red")+
theme_classic()+
ggtitle("Correlation between SHAPS and BDI")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
theme_classic()+
ggtitle("Correlation between SHAPS and BDI")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and BDI")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth()+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()+
#------------------------------------------------------------------------------#
path_to_data2<-paste0(dirname(path_to_data), "/data_RL_screen_scoring/")
# now create the scatterplots
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth()+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
# now create the scatterplots
str(new_quest)
# now create the scatterplots
new_quest$SHAPS<-as.numeric(new_quest$SHAPS)
new_quest$PANAS_pos<-as.numeric(new_quest$PANAS_pos)
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth()+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
str(new_quest)
new_quest$BDI<-as.numeric(new_quest$BDI)
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys[c_file$control_SHAPS==0]
c_SHAPS
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys[c_file$control_SHAPS==0]
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
c_SHAPS
for (number in 1:length(data_files)){
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
c_file$BDI_score<-c_quest$BDI_score
c_file$SHAPS_score<-c_quest$SHAPS_score
c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
# now the ID
c_file$ID<-number
# now save it
write.csv(c_file, paste0(dirname(path_to_data), "/data_RL_screen_scoring/",
paste0(number, ".csv")), row.names = F)
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys[c_file$control_SHAPS==0]
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
c_BDI<-c_BDI[!is.na(c_BDI)]
SHAPS<-sum(c_SHAPS)
BDI<-sum(c_BDI)
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos"] )
# get thec_BDI# get the ID
ID<-substring <- sub(" .*", "", file_name)
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
new_quest<-rbind(new_quest, as.data.frame(cbind( ID, SHAPS, BDI, PANAS_pos)))
}
# now create the scatterplots
new_quest$SHAPS<-as.numeric(new_quest$SHAPS)
new_quest$BDI<-as.numeric(new_quest$BDI)
new_quest$PANAS_pos<-as.numeric(new_quest$PANAS_pos)
ggplot(data = new_quest, aes(x = SHAPS, y = BDI))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and BDI")+
theme_classic()
# correlation between SHAPS and PANAS pos
ggplot(data = new_quest, aes(x = SHAPS, y = PANAS_pos))+
geom_point(size = 1.5)+
geom_smooth(method = "lm")+
ggtitle("Correlation between SHAPS and pos PANAS")+
theme_classic()
View(new_quest)
c_SHAPS
sum(c_SHAPS)
c_quest$PANAS_pos
source("C:/Users/fpupillo/OneDrive - Tilburg University/Projects/RL_Reversal_depression/00_check_data.R")
View(new_quest)
56-new_quest$SHAPS
rm(list=ls())
library(dplyr)
library(ggplot2)
library(Rmisc)
library(lme4)
library(car)
source("helper_functions/cum_acc_window.R")
# we are using the data that Stefanie said they have RL scoring above chance
path_to_data<-"~/PowerFolders/Frankfurt_University/rev_aned_steffi_thesis/data_RL_screen"
path_to_data<-paste0(getwd(), "/data_RL_screen")
# get the data
data_files<-list.files(path_to_data, pattern = ".csv")
#questionnaires files
quest<-read.csv(paste0(dirname(path_to_data), "/", "Output_scales_39.csv"))
# get a file only with the shaps
shaps_all<-vector()
new_quest<-vector()
for (number in 1:length(data_files)){
c_file_name<-data_files[number]
c_file<-read.csv(paste0(path_to_data, "/",c_file_name))
# take out "_Experiment_Tuerk_" from the file, to match the questionnaire file
file_name<-gsub('_Experiment_Tuerk_',' ',c_file_name)
# now the .csv
file_name<-gsub('.csv','',file_name)
# get the Shaps and BIDS
c_quest<-quest[quest$participant == file_name,]
# assign the BDI and the SHAPS
# c_file$BDI_score<-c_quest$BDI_score
#
# c_file$SHAPS_score<-c_quest$SHAPS_score
#
# c_file$PANAS_neg_score<-c_quest$PANAS_neg_score
#
# c_file$PANAS_pos_score<-c_quest$PANAS_pos_score
#
# # now the ID
# c_file$ID<-number
# get the shaps from the current file
c_SHAPS<-c_file$key_resp_SHAPS_test.keys[c_file$control_SHAPS==0]
c_SHAPS<-c_SHAPS[!is.na(c_SHAPS)]
# now the BDI
c_BDI<-c_file$key_resp_BDI_trials.keys
c_BDI<-c_BDI[!is.na(c_BDI)]
SHAPS<-sum(c_SHAPS)
BDI<-sum(c_BDI)
# now the Panas
PANAS_pos<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="pos"] )
PANAS_neg<-sum(c_file$key_resp_PANAS_test.keys[c_file$posneg=="neg"] )
# get thec_BDI# get the ID
ID<-substring <- sub(" .*", "", file_name)
c_file$SHAPS_score<-SHAPS
c_file$BDI_score<-BDI
c_file$PANAS_neg<-c_quest$PANAS_neg
c_file$PANAS_pos<-c_quest$PANAS_pos
c_file$ID<-ID
# now save it
write.csv(c_file, paste0(dirname(path_to_data), "/data_RL_screen_scoring/",
paste0(number, ".csv")), row.names = F)
shaps_all<-rbind(shaps_all, as.data.frame(cbind(ID, c_SHAPS)))
# new file for the questionnaire
new_quest<-rbind(new_quest, as.data.frame(cbind( ID, SHAPS, BDI, PANAS_pos)))
}
View(new_quest)
data_files
date()
# remove all objects in the environment
rm(list=ls())
# get all the files in the raw data
files<-list.files("raw_data", pattern = ".csv")
# get the duplicates
duplicates<-strsplit(files, "_")
duplicates
# get the duplicates
duplicates<-strsplit(files, "_")[[1]][1]
# get all the files in the raw data
files<-list.files("raw_data", pattern = ".csv")
files
# get the duplicates
duplicates<-strsplit(files, "_")[1]
View(duplicates)
# get the duplicates
duplicates<-sub(" .*", "", files)
n<-1
duplicates<-sub(" .*", "", files[n])
ID<-sub(" .*", "_", files[n])
ID<-sub("_.*", "", files[n])
# get the IDs
IDs<-vector()
for (n in 1:length(files)){
IDs[n]<-sub("_.*", "", files[n])
}
# get the duplicates
duplicates<-duplicated(IDs)
duplicates<-IDs[duplicated(IDs)]
dir.create("data_RL_screen")
# copy all the files in the "data_RL_screen" folder
if(!dir.exists("data_RL_screen")){
dir.create("data_RL_screen")
}
?copy
# copy all the raw files in that folder
for (f in files){
file.copy(from = paste0("raw_data/", files),
to = paste0("data_RL_screen"))
}
dup<-duplicates[1]
# files in the new foler
files_RL_screen<-read.files("data_RL_screen")
# files in the new foler
files_RL_screen<-list.files("data_RL_screen")
# get the names of the files with that (duplicated) ID
c_dup<-grep(files_RL_screeen, paste0("^",dub, "."))
# files in the new foler
files_RL_screen<-list.files("data_RL_screen")
# get the names of the files with that (duplicated) ID
c_dup<-grep(files_RL_screeen, paste0("^",dub, "."))
?grep
# get the names of the files with that (duplicated) ID
c_dup<-grep(patttern =  paste0("^",dub, "."), files_RL_screen)
# get the names of the files with that (duplicated) ID
c_dup<-grep(pattern =  paste0("^",dub, "."), files_RL_screen)
# get the names of the files with that (duplicated) ID
c_dup<-grep(pattern =  paste0("^",dup, "."), files_RL_screen)
# get the names of those files
c_files<-files_RL_screen[c_dup]
# get the second one
c_file<-c_files[2]
# get the second one
c_file_name<-c_files[2]
c_file<-read.csv(c_file_name)
c_file<-read.csv(paste0("files_RL_screen/c_file_name")
# rename the participant's ID within that file
c_file
c_file<-read.csv(paste0("files_RL_screen/c_file_name"))
c_file<-read.csv(paste0("files_RL_screen/", c_file_name))
c_file<-read.csv(paste0("data_RL_screen/", c_file_name))
c_file$participant[1]+1
# rename the participant's ID within that file as the current
# participants' ID +1
c_file$participant<-c_file$participant[1]+1
c_file$participant[1]+1
c_file$participant
paste0(".*", dup, "_*")
sub(paste0(".*", dup, "_*") , "", c_file_name)
c_file_name
sub(paste0( dup, "_*") , "", c_file_name)
sub(paste0( dup, "*") , "", c_file_name)
paste0(c_file$participant[1], c_file_postname)
c_file_postname
# now we also want to rename the file with that ID
c_file_postname<-sub(paste0( dup, "*") , "", c_file_name)
# create the new file name
new_file_name<-paste0(c_file$participant[1], c_file_postname)
# write the file
write.csv(c_file, paste0("data_RL_screen/", new_file_name),
row.names = F)
# delete that file in the new "data_RL_screen" folder
file.remove(paste0("data_RL_screen/",c_file_name))
# delete all the files in that directory if there are any
file.remove(list.files("data_RL_screen"))
# delete all the files in that directory if there are any
file.remove(list.files("data_RL_screen", full.names = T))
# copy all the raw files in that folder
for (f in files){
file.copy(from = paste0("raw_data/", files),
to = paste0("data_RL_screen"))
}
# get the IDs
IDs<-vector()
for (n in 1:length(files)){
IDs[n]<-sub("_.*", "", files[n])
}
# get the duplicates
duplicates<-IDs[duplicated(IDs)]
# files in the new foler
files_RL_screen<-list.files("data_RL_screen")
# loop through the files
for (dup in duplicates){
# get the names of the files with that (duplicated) ID
c_dup<-grep(pattern =  paste0("^",dup, "."), files_RL_screen)
# get the names of those files
c_files<-files_RL_screen[c_dup]
# get the second one
c_file_name<-c_files[2]
c_file<-read.csv(paste0("data_RL_screen/", c_file_name))
# delete that file in the new "data_RL_screen" folder
file.remove(paste0("data_RL_screen/",c_file_name))
# rename the participant's ID within that file as the current
# participants' ID +1
c_file$participant<-c_file$participant[1]+1
# now we also want to rename the file with that ID
c_file_postname<-sub(paste0( dup, "*") , "", c_file_name)
# create the new file name
new_file_name<-paste0(c_file$participant[1], c_file_postname)
# write the file
write.csv(c_file, paste0("data_RL_screen/", new_file_name),
row.names = F)
}
